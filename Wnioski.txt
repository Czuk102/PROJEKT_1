Wyniki:

+------------+-------------------------+-----------------------------+---------------------------------------+
|            | tablica losowych liczb  | tablica posortowanych liczb | tablica odwrotnie posortowanych liczb |
+------------+-------------------------+-----------------------------+---------------------------------------+
| heapSort   | 0.07000 s               | 0.05600 s                   | 0.04300 s                             |
+------------+-------------------------+-----------------------------+---------------------------------------+
| quickSort  | 0.04000 s               | 147.04900 s                 | 122.88600 s                           |
+------------+-------------------------+-----------------------------+---------------------------------------+
| mergeSort  | 0.04900 s               | 0.02400 s                   | 0.02500 s                             |
+------------+-------------------------+-----------------------------+---------------------------------------+
| bubbleSort | 238.76100 s             | 82.63200 s                  | 158.97600 s                            |
+------------+-------------------------+-----------------------------+---------------------------------------+

Otrzymane wyniki wskazują ,że dla tablicy pseudolosowych liczb najlepiej spisał sie quickSort,
dla juz posortowanej tablicy mergeSort a dla odwrotnie posortowanej zdecydowanie najlepiej heapsort.
Warto dodać że dla juz posortowanej tablicy zarówno rosnąco jak i malejąco quickSort prowadził do przepełnienia stosu,
wobec czego musiałem zwiekszyć rozmiar stosu(patrz plik CMakeLists.txt) dlatego ten algorytm,
nie nadaje się do sortowania tablic posortowanych ale z założenia nie powinno się dopuszczać do takich sytuacji
więc można go uznać za najbardziej efektywny dla losowych lub zbliżonych do losowych liczb.
HeapSort spisal się najlepiej z tablica odwrotnie posortowaną,o jeden rząd wielkości niż reszta.
bubbleSort nie nadaje się do dużych seri danych co wyraźnie widać.
MergeSort spisał się średnio najlepiej z wszystkich algorymów,
dlatego można uznać go za najbardziej uniwersalny i można go stosować w momencie kiedy nie wiemy czy nasze dane wejsciowe
nie są przypadkiem juz posortowane. Jako ogólny wniosek, wypada stwierdzić ,że zanim wybierzemy metode sortowania
dobrze jest ocenić nasze dane wejściowe i wybrać najlepszą metodę.



Link do repozytorium: https://github.com/Czuk102/PROJEKT_1.git